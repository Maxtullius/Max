{
  
    
        "post0": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: . Parameters: . Arguments: . Modularity: . Procedural Abstraction: . What are some other names for procedures?: . Why are procedures effective?: . Challenge 1 below: Add the command that will call the procedure. . decimal = 7 def convertToBinary(n): (decimal) print() . . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def charToBinary(x):() # The output shown below is the output you are supposed to get . &#39;&#39;APCSP&#39;&#39; in binary is [1000001, 1010000, 1000011, 1010011, 1010000] .",
            "url": "https://maxtullius.github.io/Max/2022/12/13/notetemplate.html",
            "relUrl": "/2022/12/13/notetemplate.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Technical Business Panel Notes",
            "content": "First Presenter . Born in Vietnam and studied abroad in Spain | Santa Clara University | Finance Major | Stockbroker but didn&#39;t really enjoy it | Worked at 3 big companies in High Tech | Moved to San Diego and learned to surf | HP Inc., Thermo Fisher Scientific, Qualcomm | First did financial banking and switched to High Tech | Worked for companies that wanted to help people ### Second Presenter | Software Engineer: SRE, DevOps, Infustructure | Livermore High School | Enrolled at UCLA for Electrical Engineering | Center for Embedded Networked Sensors | Graduated from Grad school | System Engineer at a start up | NBC Universal, Streaming media infrastructure | Intro to DevOps, transition to Qualcomm | Working at Twitter | Continuous learning is very important when going into High Tech | .",
            "url": "https://maxtullius.github.io/Max/notebook/2022/12/13/TechnicalBusinessPanel.html",
            "relUrl": "/notebook/2022/12/13/TechnicalBusinessPanel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "",
            "url": "https://maxtullius.github.io/Max/2022/12/13/Bash.html",
            "relUrl": "/2022/12/13/Bash.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Variables and Assignment Notes",
            "content": "Notes . Variables represent a value | Mathematical expressions can be performed on the variable | You can define a variable using var and then the variable=the value | You can assign 2 objects to one variable | Use .append to add objects to the list | You break down list into other list | You can organize items in the lists using for loops | The split() method splits a string into a list. You can specify the separator, default separator is any whitespace. | The join() method takes all items in an iterable and joins them into one string. A string must be specified as the separator. | .",
            "url": "https://maxtullius.github.io/Max/jupyter/2022/12/13/.1-3.2Notes.html",
            "relUrl": "/jupyter/2022/12/13/.1-3.2Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "3.1-3.2 Homework",
            "content": "albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = input(&quot;What is your desired album?&quot;) song = input(&quot;What is your desired song?&quot;) print(albums[int(album) - 1][3][int(song) - 1][1]) . Some Folks .",
            "url": "https://maxtullius.github.io/Max/jupyter/2022/12/13/.1-3.2Homework.html",
            "relUrl": "/jupyter/2022/12/13/.1-3.2Homework.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Write any extra notes you have here . Hack #2 - Functions Classwork . . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int def converttobin(n): # function for converting decimal to binary def survivors(binary): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] # replace the names above with your choice of people in the house . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | questions = 6 correct = 0 Q1 = input() if Q1 == : Q2 = input() if Q2 == : Q3 = input() if Q3 == : Q4 = input() print( &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... .",
            "url": "https://maxtullius.github.io/Max/2022/12/12/hw.html",
            "relUrl": "/2022/12/12/hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Homework",
            "content": "Notes . Nested Conditional Statements consist of conditional statemetns within conditional statements. | If Else Statements can be put inside of another if else statement using this layout for psuedo code. | algorithm - A set of instructions that accomplish a task. | selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. | A conditional is a statement that affects the flow/outcome of a program by executing different statements based on the result of a true or false statement. That true or false statement is a boolean expression. | In almost every programming language, if/else statements fill in the role of the conditional. Some languages call this switch blocks but if/else is the most used term. | . Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . decimal = int(input(&quot;pick a number&quot;)) def convert(dec): bin = &quot;&quot; i = 7 while i &gt;= 0: if dec % (2**i) == dec: bin = bin + &quot;0&quot; i -= 1 else: bin = bin + &quot;1&quot; dec -= 2**i i -= 1 print(bin) convert(decimal) . 01000011 .",
            "url": "https://maxtullius.github.io/Max/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): if N &lt; 2: return N lower = 2 upper = N//2 while lower &lt;= upper: mid = (lower + upper)//2 if (mid**2 == N): return mid elif (mid**2 &lt; N): lower = mid + 1 else: upper = mid - 1 print(sqrt(16)) . 4 . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed . Developing Algorithms . toc: true | badges: true | comments: true | . Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . it is too hot outside . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . it is too hot outside i will go outside . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 counter = 1 for i in range (0, 5): sum = sum + counter counter = counter + 2 i += 1 print(sum) . 25 . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 . man = 6 while man != 1: if man %2 == 0: man = man /2 else: man = (man *3) +1 print(man) . 3.0 10.0 5.0 16.0 8.0 4.0 2.0 1.0 .",
            "url": "https://maxtullius.github.io/Max/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = ? counter = ? for i in range (0, ?): sum = sum + ? counter = counter + ? . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 .",
            "url": "https://maxtullius.github.io/Max/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lists and Iteration Homework",
            "content": "Challenges and Problems . I was stuck on the 3.8 challenge so I didn&#39;t get to the homework. For some reason my code just straight up wouldn&#39;t work. It wouldn&#39;t remove the numbers I didn&#39;t want after I used the aList.remove command. | . Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] = x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[i] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . questions = [ #questions go here (remember to make them strings!) ] def questionloop(): pass #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(): pass #make a function to check if the answer was correct or not . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrella&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(2,&quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[6] print(grocery_list[2]) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrella&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] newlist = [] def binary_convert(binary): dec = 0 i = 7 for num in str(binary): if int(num) == 1: dec += 2**i i -= 1 continue else: i -= 1 continue newlist.append(dec) for x in binarylist: binary_convert(x) print(newlist) for new in newlist: if new &gt; 100: newlist.remove(new) print(newlist) . [73, 170, 150, 55, 236, 209, 129] [73, 150, 55, 209] .",
            "url": "https://maxtullius.github.io/Max/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Night At The Museum Notes",
            "content": "Notes . - .",
            "url": "https://maxtullius.github.io/Max/blog/2022/11/08/NATM.html",
            "relUrl": "/blog/2022/11/08/NATM.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Projectplan",
            "content": "Project Plan . Main Function . Our final project will be a website that will be a webstie that will be a website that will help people create music playlists. We will have different genres represented by diferent html tabs at the top of our blog. When these are clicked there will be links to the different posts. These posts will be different artists and there will be a paragraph to describe them. Then we will put some of the most popular songs by these artist. We wil also add who these artists are similar to and what songs are similar to each other. Outline . | We will begin with creating the html tabs of the different genres. We will be doing, rap, rock, country, and pop. We will add the history of this genre and what it sounds like. There will be a summery of why someone might like it. | We will then create the posts of the artists. We will make sure to add at least 5 artists to each genre. We wil add their backstory and what their music sounds like. we will also add what other artists they sound like. | Then we will ads the songs of each of these artists. 5 songs per artist. A total of 100 songs will be added. We will also right similar songs t these. College Board Criteria . | Row 1: Program Purpose and Function. The purpose of the website will be to create a playlist. The functin will be different posts create and html tabs that are linked to these. | Row 2: Data Abstraction. We will be able to explain the variables of artists, songs, and genres. | Row 3: Managing Complexity. If we run into problems we will ask each other questions. | Row 4: Procedural Abstraction. We will understand our process nd manage our time well. | Row 5: Algorithm Implementation. Organizign by genre, artist, and songs will show this. | Row 6: Testing. Testing will occur after we create the webstie. We will make sure every page is running well. | .",
            "url": "https://maxtullius.github.io/Max/2022/10/19/ProjectPlan.html",
            "relUrl": "/2022/10/19/ProjectPlan.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Project Plan",
            "content": "",
            "url": "https://maxtullius.github.io/Max/2022/10/19/Project.html",
            "relUrl": "/2022/10/19/Project.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "",
            "url": "https://maxtullius.github.io/Max/2022/10/06/Bash.html",
            "relUrl": "/2022/10/06/Bash.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99 } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) total= menu[item] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 3.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://maxtullius.github.io/Max/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Notebook Test",
            "content": "from ctypes.wintypes import MSG from email import message from socket import MsgFlag def question_answer(prompt): print(&quot;Question: &quot; + prompt) MSG = input(&quot;2&quot;) print(&quot;Answer: &quot; + MSG) question_answer(&quot;What is 1+1?&quot;) . Question: What is 1+1? Answer: 2 . def question_answer(prompt): print(&quot;Question: &quot; + prompt) MSG = input(&quot;1920&quot;) print(&quot;Answer: &quot; + MSG) question_answer(&quot;When was the NFL created?&quot;) . Question: When was the NFL created? Answer: 1920 . def question_answer(prompt): print(&quot;Question: &quot; + prompt) MSG = input(&quot;Packers&quot;) print(&quot;Answer: &quot; + MSG) question_answer(&quot;Who won the first Super Bowl?&quot;) . Question: Who won the first Super Bowl? Answer: packers .",
            "url": "https://maxtullius.github.io/Max/notebook/2022/09/16/notebookquiz.html",
            "relUrl": "/notebook/2022/09/16/notebookquiz.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Tri 1 Final Missed Questions",
            "content": "Missed Questions . I missed questions: 22, 26, 28, 35, 47, 48, and 49. | On question 22 I selected answer B. I took an estimated guess because I didn&#39;t understand or know the question. The correct answer was C. | On question 26 I selected answer C. I chose this answer because it seemed like the best answer to the question. The correct answer was A. | On question 28 I selected option D. I did this because I knew that it could not be A or B so I took the 50/50 chance and chose D. The correct answer was C. | On question 35 I selected options D and B. I the answer that was wrong was B. I chose B as my guess because I knew it was D and couldn&#39;t figure out what the other answer was so I took a guess. The other correct answer was A. | On question 47 I selected A. I misclicked and did not check over the questions. The correct answer was D. | On question 48 I selected B. I did this because in the code segment I saw that 50-&gt;y so without looking at the rest of the code segment. The correct answer was C. | On question 49 I selected D. I don&#39;t really know why I chose this answer it was mostly a guess and if I am being honest I was just trying to finsih the Final. The correct answer was C. | .",
            "url": "https://maxtullius.github.io/Max/blog/2022/09/11/Tri1Final.html",
            "relUrl": "/blog/2022/09/11/Tri1Final.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "My first Blog",
            "content": "print(&quot;hello world&quot;) . hello world . Blog . I like pizz | .",
            "url": "https://maxtullius.github.io/Max/jupyter/2022/09/09/FirstNotebook.html",
            "relUrl": "/jupyter/2022/09/09/FirstNotebook.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "An Example Markdown Post",
            "content": "This is my first Markdown . You must run cells above to define project . echo “Navigate to project, then navigate to area wwhere files were cloned” . cd $project echo “show the contents of README.md” echo “” . cat README.md # show contents of file, in this case markdown echo “” echo “end of README.md” .",
            "url": "https://maxtullius.github.io/Max/markdown/2022/09/09/FirstMarkdown.html",
            "relUrl": "/markdown/2022/09/09/FirstMarkdown.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Scrumprocess",
            "content": "Scrumprocess . . title: Scrumprocess | toc: true | comments: true | categories: [Blog] | - | . | . .",
            "url": "https://maxtullius.github.io/Max/2022/07/22/ScrumProcess.html",
            "relUrl": "/2022/07/22/ScrumProcess.html",
            "date": " • Jul 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://maxtullius.github.io/Max/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "List and Dictionary",
            "content": "InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Tullius&quot;, &quot;DOB&quot;: &quot;February 1&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;FavColor&quot;: &quot;Purple&quot;, &quot;Email&quot;: &quot;max@lrtullius.com&quot;, &quot;Owns_Cars&quot;: [&quot;No Car&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Jake&quot;, &quot;LastName&quot;: &quot;Warren&quot;, &quot;DOB&quot;: &quot;September 8&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;FavColor&quot;: &quot;Blue&quot;, &quot;Email&quot;: &quot;jacobw22751@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2016-Toyota Tacoma&quot;] }) InfoDb.append({ &quot;FirstName&quot;: input(&quot;Name:&quot;), &quot;LastName&quot;: input(&quot;Last Name:&quot;), &quot;DOB&quot;: input(&quot;DOB:&quot;), &quot;Residence&quot;: input(&quot;Residence&quot;), &quot;FavColor&quot;: input(&quot;Favorite Color&quot;), &quot;Email&quot;: input(&quot;Email:&quot;), &quot;Owns_Cars&quot;: input(&quot;Owned_Cars:&quot;) }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Max&#39;, &#39;LastName&#39;: &#39;Tullius&#39;, &#39;DOB&#39;: &#39;February 1&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;FavColor&#39;: &#39;Purple&#39;, &#39;Email&#39;: &#39;max@lrtullius.com&#39;, &#39;Owns_Cars&#39;: [&#39;No Car&#39;]}, {&#39;FirstName&#39;: &#39;Jake&#39;, &#39;LastName&#39;: &#39;Warren&#39;, &#39;DOB&#39;: &#39;September 8&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;FavColor&#39;: &#39;Blue&#39;, &#39;Email&#39;: &#39;jacobw22751@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2016-Toyota Tacoma&#39;]}, {&#39;FirstName&#39;: &#39;&#39;, &#39;LastName&#39;: &#39;&#39;, &#39;DOB&#39;: &#39;&#39;, &#39;Residence&#39;: &#39;&#39;, &#39;FavColor&#39;: &#39;&#39;, &#39;Email&#39;: &#39;&#39;, &#39;Owns_Cars&#39;: &#39;&#39;}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavColor:&quot;, d_rec[&quot;FavColor&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars:&quot;, d_rec[&quot;Owns_Cars&quot;]) # end=&quot;&quot; make sure no return occurs print() def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Max Tullius Residence: San Diego FavColor: Purple Birth Day: February 1 Cars: [&#39;No Car&#39;] Jake Warren Residence: San Diego FavColor: Blue Birth Day: September 8 Cars: [&#39;2016-Toyota Tacoma&#39;] Residence: FavColor: Birth Day: Cars: .",
            "url": "https://maxtullius.github.io/Max/notebook/2022/06/10/Dictionary.html",
            "relUrl": "/notebook/2022/06/10/Dictionary.html",
            "date": " • Jun 10, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "App Lab Notes",
            "content": "Notes . My test is about the NFL | For everything you put you need event | Use a playspeech bar in event for wrong answers | When the question is answered you have to use the setscreen command to go to the next question | . My Quiz . https://studio.code.org/projects/applab/xLIAqcPGXDiH_RvTNshZYcz_WuaeP7Q6K_t976Xw2zw | . Issues . I couldn&#39;t figure out how to make the sound go off per button but then I needed to add the event with play speech | .",
            "url": "https://maxtullius.github.io/Max/blog/2022/05/10/AppLab.html",
            "relUrl": "/blog/2022/05/10/AppLab.html",
            "date": " • May 10, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://maxtullius.github.io/Max/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://maxtullius.github.io/Max/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}